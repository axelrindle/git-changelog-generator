// Require modules
const { program } = require('commander');
const pkg = require('../../package.json');
const remoteAdapters = require('../remote-adapters');

/**
 * Generates markdown markup based on a previously generated result list.
 * 
 * @param {Array} resultList A list of tags with associated commits.
 */
module.exports = resultList => {
    let markdown = '';

    let remoteAdapter;
    if (program.remote) {
        if (!program.repo) {
            throw new Error('--remote must be used in combination with --repo!');
        }

        remoteAdapter = remoteAdapters[program.remote](program.repo);
    }

    // Title
    if (program.title) {
        markdown += '# Changelog\n\n';
    }

    // Append tags and their commits
    resultList.forEach(entry => {
        let tagName = entry.tag.name;

        // transform to clickable link if remote is specified
        if (remoteAdapter) {
            tagName = `[${tagName}](${remoteAdapter.tag(tagName)})`;
        }

        markdown += `## ${tagName} \`(${entry.tag.date})\`\n`;

        if (program.commitAmount) {
            markdown += `Total changes in this version: ${entry.commits.length}\n\n`;
        } else {
            markdown += '\n';
        }

        if (entry.commits.length > 0) {
            // Each commit message is a dedicated list entry
            entry.commits.forEach(commit => {
                markdown += `- ${commit.message}`;

                // append remote link
                if (remoteAdapter) {
                    markdown += ` ([\`${commit.sha.substring(0, 7)}\`](${remoteAdapter.commit(commit.sha)}))`;
                }

                markdown += '\n';
            });

            markdown += '\n';
        }
    });

    // Notice on generated content
    markdown += '----\n\n';
    markdown += `> *Generated by [git-changelog-generator v${pkg.version}](https://github.com/axelrindle/git-changelog-generator)*\n`;

    return markdown;
};